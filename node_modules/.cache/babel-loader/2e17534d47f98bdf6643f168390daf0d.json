{"remainingRequest":"/home/mnl33/code/vue-forum/Forum-MVP/node_modules/thread-loader/dist/cjs.js!/home/mnl33/code/vue-forum/Forum-MVP/node_modules/babel-loader/lib/index.js!/home/mnl33/code/vue-forum/Forum-MVP/node_modules/eslint-loader/index.js??ref--14-0!/home/mnl33/code/vue-forum/Forum-MVP/src/store/modules/discussions.js","dependencies":[{"path":"/home/mnl33/code/vue-forum/Forum-MVP/src/store/modules/discussions.js","mtime":1643209770826},{"path":"/home/mnl33/code/vue-forum/Forum-MVP/babel.config.js","mtime":1640544182000},{"path":"/home/mnl33/code/vue-forum/Forum-MVP/node_modules/cache-loader/dist/cjs.js","mtime":1643186739485},{"path":"/home/mnl33/code/vue-forum/Forum-MVP/node_modules/thread-loader/dist/cjs.js","mtime":1643186739453},{"path":"/home/mnl33/code/vue-forum/Forum-MVP/node_modules/babel-loader/lib/index.js","mtime":1643186739974},{"path":"/home/mnl33/code/vue-forum/Forum-MVP/node_modules/eslint-loader/index.js","mtime":1643186739542}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL21ubDMzL2NvZGUvdnVlLWZvcnVtL0ZvcnVtLU1WUC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9ob21lL21ubDMzL2NvZGUvdnVlLWZvcnVtL0ZvcnVtLU1WUC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IGZpcmViYXNlIGZyb20gJ0AvaGVscGVycy9maXJlYmFzZSc7CmltcG9ydCB7IGZpbmRCeUlkLCBkb2NUb1Jlc291cmNlIH0gZnJvbSAnQC9oZWxwZXJzJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHsKICAgIGl0ZW1zOiBbXQogIH0sCiAgZ2V0dGVyczogewogICAgZGlzY3Vzc2lvbjogZnVuY3Rpb24gZGlzY3Vzc2lvbihzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICAgIC8vIG5vdCBzdXJlIGlmIHRoaXMgaXMgd29ya2luZwogICAgICByZXR1cm4gZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgY29uc29sZS5sb2coZ2V0dGVycyk7CiAgICAgICAgdmFyIGRpc2N1c3Npb24gPSBmaW5kQnlJZChzdGF0ZS5pdGVtcywgaWQpOwogICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRpc2N1c3Npb24pLCB7fSwgewogICAgICAgICAgZ2V0IGF1dGhvcigpIHsKICAgICAgICAgICAgcmV0dXJuIGZpbmRCeUlkKHJvb3RTdGF0ZS51c2Vycy5pdGVtcywgZGlzY3Vzc2lvbi51c2VySWQpOwogICAgICAgICAgfQoKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIGZldGNoRGlzY3Vzc2lvbjogZnVuY3Rpb24gZmV0Y2hEaXNjdXNzaW9uKF9yZWYsIF9yZWYyKSB7CiAgICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7CiAgICAgIHZhciBpZCA9IF9yZWYyLmlkOwogICAgICByZXR1cm4gZGlzcGF0Y2goJ2ZldGNoSXRlbScsIHsKICAgICAgICByZXNvdXJjZTogJ2Rpc2N1c3Npb25zJywKICAgICAgICBpZDogaWQKICAgICAgfSwgewogICAgICAgIHJvb3Q6IHRydWUKICAgICAgfSk7CiAgICB9LAogICAgY3JlYXRlRGlzY3Vzc2lvbjogZnVuY3Rpb24gY3JlYXRlRGlzY3Vzc2lvbihfcmVmMywgX3JlZjQpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgY29tbWl0LCBzdGF0ZSwgcm9vdFN0YXRlLCB3b3JkLCBkZWZpbml0aW9uLCBxdWVzdGlvbiwgZGlzY3Vzc2lvbiwgYmF0Y2gsIGRpc2NSZWYsIGZlZWRSZWYsIHVzZXJSZWYsIHVzZXJJZDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMy5jb21taXQsIHN0YXRlID0gX3JlZjMuc3RhdGUsIHJvb3RTdGF0ZSA9IF9yZWYzLnJvb3RTdGF0ZTsKICAgICAgICAgICAgICAgIHdvcmQgPSBfcmVmNC53b3JkLCBkZWZpbml0aW9uID0gX3JlZjQuZGVmaW5pdGlvbiwgcXVlc3Rpb24gPSBfcmVmNC5xdWVzdGlvbjsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlZCBkaWN1c3Npb24gdG8gc2VuZCB0byBmaXJlc3RvcmU6IHdvcmQsIGRlZmluaXRpb24sIHF1ZXN0aW9uLi4uJywgd29yZCwgZGVmaW5pdGlvbiwgcXVlc3Rpb24pOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3N0YXRlIGZyb20gY3JlYXRlRGlzY3Vzc2lvbjogJywgc3RhdGUpOwogICAgICAgICAgICAgICAgZGlzY3Vzc2lvbiA9IHsKICAgICAgICAgICAgICAgICAgdXNlcklkOiByb290U3RhdGUuYXV0aC5hdXRoSWQsCiAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwKICAgICAgICAgICAgICAgICAgd29yZDogd29yZCwKICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbjogZGVmaW5pdGlvbiwKICAgICAgICAgICAgICAgICAgcXVlc3Rpb246IHF1ZXN0aW9uCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgYmF0Y2ggPSBmaXJlYmFzZS5maXJlc3RvcmUoKS5iYXRjaCgpOwogICAgICAgICAgICAgICAgZGlzY1JlZiA9IGZpcmViYXNlLmZpcmVzdG9yZSgpLmNvbGxlY3Rpb24oJ2Rpc2N1c3Npb25zJykuZG9jKCk7CiAgICAgICAgICAgICAgICBmZWVkUmVmID0gZmlyZWJhc2UuZmlyZXN0b3JlKCkuY29sbGVjdGlvbignZmVlZHMnKS5kb2MoKTsKICAgICAgICAgICAgICAgIHVzZXJSZWYgPSBmaXJlYmFzZS5maXJlc3RvcmUoKS5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyhyb290U3RhdGUuYXV0aC5hdXRoSWQpOyAvLyBhZGQgbmV3IGRpc2N1c3Npb24gdG8gZmlyZXN0b3JlIHVzZXJzIGNvbGxlY3Rpb24KCiAgICAgICAgICAgICAgICBiYXRjaC5zZXQoZGlzY1JlZiwgZGlzY3Vzc2lvbik7IC8vIGFkZCBuZXcgZGlzY3Vzc2lvbiB0byBmaXJlc3RvcmUgdXNlcnMgY29sbGVjdGlvbgoKICAgICAgICAgICAgICAgIGJhdGNoLnVwZGF0ZSh1c2VyUmVmLCB7CiAgICAgICAgICAgICAgICAgIGRpc2N1c3Npb25zOiBmaXJlYmFzZS5maXJlc3RvcmUuRmllbGRWYWx1ZS5hcnJheVVuaW9uKGRpc2NSZWYuaWQpCiAgICAgICAgICAgICAgICB9KTsgLy8gYXBwZW5kIG5ldyBmZWVkIHRvIGZpcmVzdG9yZSBmZWVkcycgY29sbGVjdGlvbgoKICAgICAgICAgICAgICAgIGJhdGNoLnNldChmZWVkUmVmLCB7CiAgICAgICAgICAgICAgICAgIGRpc2N1c3Npb246IHsKICAgICAgICAgICAgICAgICAgICB3b3JkOiB3b3JkLAogICAgICAgICAgICAgICAgICAgIGlkOiBkaXNjUmVmLmlkCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbmV3IGRpc2N1c3Npb24nLCBkaXNjUmVmKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCduZXdmZWVkOiAnLCBmZWVkUmVmKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIHJldHVybiBiYXRjaC5jb21taXQoKTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIGNvbW1pdCgnc2V0SXRlbScsIHsKICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6ICdkaXNjdXNzaW9ucycsCiAgICAgICAgICAgICAgICAgIGl0ZW06IGRpc2NSZWYKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB1c2VySWQgPSByb290U3RhdGUuYXV0aC5hdXRoSWQ7CiAgICAgICAgICAgICAgICBjb21taXQoJ3VzZXJzL2FwcGVuZERpc2N1c3Npb25Ub1VzZXInLCB7CiAgICAgICAgICAgICAgICAgIHVzZXJJZDogdXNlcklkLAogICAgICAgICAgICAgICAgICBkaXNjdXNzaW9uSWQ6IGRpc2NSZWYuaWQKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgdXBkYXRlRGlzY3Vzc2lvbjogZnVuY3Rpb24gdXBkYXRlRGlzY3Vzc2lvbihfcmVmNSwgX3JlZjYpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgc3RhdGUsIHdvcmQsIGRlZmluaXRpb24sIHF1ZXN0aW9uLCBpZCwgZGlzY3Vzc2lvbiwgbmV3RGlzY3Vzc2lvbiwgZGlzY3Vzc2lvblJlZiwgYmF0Y2g7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY1LmNvbW1pdCwgc3RhdGUgPSBfcmVmNS5zdGF0ZTsKICAgICAgICAgICAgICAgIHdvcmQgPSBfcmVmNi53b3JkLCBkZWZpbml0aW9uID0gX3JlZjYuZGVmaW5pdGlvbiwgcXVlc3Rpb24gPSBfcmVmNi5xdWVzdGlvbiwgaWQgPSBfcmVmNi5pZDsKICAgICAgICAgICAgICAgIGRpc2N1c3Npb24gPSBmaW5kQnlJZChzdGF0ZS5pdGVtcywgaWQpOwogICAgICAgICAgICAgICAgbmV3RGlzY3Vzc2lvbiA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGlzY3Vzc2lvbiksIHt9LCB7CiAgICAgICAgICAgICAgICAgIHdvcmQ6IHdvcmQsCiAgICAgICAgICAgICAgICAgIGRlZmluaXRpb246IGRlZmluaXRpb24sCiAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiBxdWVzdGlvbgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBkaXNjdXNzaW9uUmVmID0gZmlyZWJhc2UuZmlyZXN0b3JlKCkuY29sbGVjdGlvbignZGlzY3Vzc2lvbnMnKS5kb2MoaWQpOwogICAgICAgICAgICAgICAgYmF0Y2ggPSBmaXJlYmFzZS5maXJlc3RvcmUoKS5iYXRjaCgpOwogICAgICAgICAgICAgICAgYmF0Y2gudXBkYXRlKGRpc2N1c3Npb25SZWYsIG5ld0Rpc2N1c3Npb24pOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5OwogICAgICAgICAgICAgICAgcmV0dXJuIGJhdGNoLmNvbW1pdCgpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBjb21taXQoJ3NldEl0ZW0nLCB7CiAgICAgICAgICAgICAgICAgIHJlc291cmNlOiAnZGlzY3Vzc2lvbnMnLAogICAgICAgICAgICAgICAgICBpdGVtOiBuZXdEaXNjdXNzaW9uCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIGRvY1RvUmVzb3VyY2UobmV3RGlzY3Vzc2lvbikpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSwKICBtdXRhdGlvbnM6IHt9Cn07"},{"version":3,"sources":["/home/mnl33/code/vue-forum/Forum-MVP/src/store/modules/discussions.js"],"names":["firebase","findById","docToResource","namespaced","state","items","getters","discussion","rootState","id","console","log","author","users","userId","actions","fetchDiscussion","dispatch","resource","root","createDiscussion","commit","word","definition","question","auth","authId","timestamp","Date","now","batch","firestore","discRef","collection","doc","feedRef","userRef","set","update","discussions","FieldValue","arrayUnion","item","discussionId","updateDiscussion","newDiscussion","discussionRef","mutations"],"mappings":"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","sourcesContent":["import firebase from '@/helpers/firebase'\nimport { findById, docToResource } from '@/helpers'\n\nexport default {\n    namespaced: true,\n    state: {\n        items: [],\n    },\n    getters: {\n        discussion: (state, getters, rootState) => { // not sure if this is working\n            return (id) => {\n                console.log(getters)\n                const discussion = findById(state.items, id)\n                    return { \n                        ...discussion,\n                        get author () {\n                            return findById(rootState.users.items, discussion.userId)\n                        }\n                    }\n            }\n        },\n    },\n    actions: {\n        fetchDiscussion: ({ dispatch }, { id }) => dispatch('fetchItem', { resource: 'discussions', id }, { root: true }),\n        async createDiscussion ({ commit, state, rootState }, {word, definition, question} ) {\n            console.log('received dicussion to send to firestore: word, definition, question...', word, definition, question)\n            console.log('state from createDiscussion: ', state)\n            const discussion = {\n                userId: rootState.auth.authId,\n                timestamp: Date.now(),\n                word,\n                definition,\n                question\n            }\n            const batch = firebase.firestore().batch()\n            const discRef = firebase.firestore().collection('discussions').doc()\n            const feedRef = firebase.firestore().collection('feeds').doc()\n            const userRef = firebase.firestore().collection('users').doc(rootState.auth.authId)\n            // add new discussion to firestore users collection\n            batch.set(discRef, discussion)\n            // add new discussion to firestore users collection\n            batch.update(userRef, {\n                discussions: firebase.firestore.FieldValue.arrayUnion(discRef.id)\n            })\n            // append new feed to firestore feeds' collection\n            batch.set(feedRef, {\n                discussion : {\n                    word,\n                    id: discRef.id\n                },\n                timestamp: Date.now()\n            })\n            console.log('new discussion', discRef)\n            console.log('newfeed: ', feedRef)\n            await batch.commit()\n    \n            commit('setItem', { resource: 'discussions', item: discRef }, { root: true })\n            const userId = rootState.auth.authId\n            commit('users/appendDiscussionToUser', { userId, discussionId: discRef.id}, { root: true })\n        },\n        async updateDiscussion ({commit, state}, {word, definition, question, id}) {\n            let discussion = findById(state.items, id)\n            const newDiscussion = { ...discussion, word, definition, question }\n            const discussionRef = firebase.firestore().collection('discussions').doc(id)\n            const batch = firebase.firestore().batch()\n            batch.update(discussionRef, newDiscussion)\n            await batch.commit()\n            commit('setItem', { resource: 'discussions', item: newDiscussion}, { root: true })\n            return docToResource(newDiscussion)\n        }    \n    },\n    mutations: {}\n}"]}]}